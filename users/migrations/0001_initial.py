<<<<<<< HEAD:api/migrations/0001_initial.py
# Generated by Django 4.2 on 2025-04-04 08:39

import api.models
from django.db import migrations, models
import django.db.models.deletion
=======
# Generated by Django 4.2 on 2025-04-06 23:34

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
>>>>>>> origin/dev:users/migrations/0001_initial.py


class Migration(migrations.Migration):

    initial = True

    dependencies = [
<<<<<<< HEAD:api/migrations/0001_initial.py
=======
        ('auth', '0001_initial'),
>>>>>>> origin/dev:users/migrations/0001_initial.py
    ]

    operations = [
        migrations.CreateModel(
<<<<<<< HEAD:api/migrations/0001_initial.py
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='ФИО')),
                ('image', models.ImageField(upload_to='team', verbose_name='Фото')),
                ('position', models.CharField(max_length=255, verbose_name='Должность')),
                ('paginate', models.SmallIntegerField(verbose_name='Позиция на странице')),
                ('discription', models.TextField(verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Член команда',
                'verbose_name_plural': 'Команда',
            },
        ),
        migrations.CreateModel(
            name='TypeDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=255, verbose_name='Тип документа')),
            ],
            options={
                'verbose_name': 'Тип документа',
                'verbose_name_plural': 'Типы документов',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название документа')),
                ('file', models.FileField(upload_to=api.models.upload_file, verbose_name='Файл документа')),
                ('on_main_page', models.BooleanField(default=False, verbose_name='Отображать на главной странице')),
                ('team_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='api.team', verbose_name='Член команды')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='api.typedocument', verbose_name='Тип документа')),
            ],
            options={
                'verbose_name': 'Документ',
                'verbose_name_plural': 'Документы',
            },
=======
            name='RassvetUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
>>>>>>> origin/dev:users/migrations/0001_initial.py
        ),
    ]
